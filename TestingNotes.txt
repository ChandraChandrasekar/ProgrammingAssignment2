Notes, with R commands and console output to show how the makeCacheMatrix and cacheSolve functions were tested.


1. First create an 8x8 matrix h8, using a function hilbert. Get inv8, its inverse, using the solve function of R.


> hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
> h8 <- hilbert(8); h8
          [,1]      [,2]      [,3]       [,4]       [,5]       [,6]       [,7]       [,8]
[1,] 1.0000000 0.5000000 0.3333333 0.25000000 0.20000000 0.16666667 0.14285714 0.12500000
[2,] 0.5000000 0.3333333 0.2500000 0.20000000 0.16666667 0.14285714 0.12500000 0.11111111
[3,] 0.3333333 0.2500000 0.2000000 0.16666667 0.14285714 0.12500000 0.11111111 0.10000000
[4,] 0.2500000 0.2000000 0.1666667 0.14285714 0.12500000 0.11111111 0.10000000 0.09090909
[5,] 0.2000000 0.1666667 0.1428571 0.12500000 0.11111111 0.10000000 0.09090909 0.08333333
[6,] 0.1666667 0.1428571 0.1250000 0.11111111 0.10000000 0.09090909 0.08333333 0.07692308
[7,] 0.1428571 0.1250000 0.1111111 0.10000000 0.09090909 0.08333333 0.07692308 0.07142857
[8,] 0.1250000 0.1111111 0.1000000 0.09090909 0.08333333 0.07692308 0.07142857 0.06666667
> inv8 <- solve(h8)
> inv8
        [,1]      [,2]       [,3]       [,4]        [,5]        [,6]        [,7]       [,8]
[1,]      64     -2016      20160     -92400      221760     -288288      192192     -51480
[2,]   -2016     84672    -952560    4656960   -11642400    15567552   -10594584    2882880
[3,]   20160   -952560   11430720  -58212000   149688000  -204324119   141261119  -38918880
[4,]  -92400   4656960  -58212000  304919999  -800414996  1109908794  -776936155  216215998
[5,]  221760 -11642400  149688000 -800414996  2134439987 -2996753738  2118916783 -594593995
[6,] -288288  15567552 -204324119 1109908793 -2996753738  4249941661 -3030050996  856215352
[7,]  192192 -10594584  141261119 -776936154  2118916782 -3030050996  2175421226 -618377753
[8,]  -51480   2882880  -38918880  216215998  -594593995   856215351  -618377753  176679358

2. Matrxi multiply inv8 and h8, to get the diagnol matrix as expected. 
> round(inv8 %*% h8, 3)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    0    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0    0
[3,]    0    0    1    0    0    0    0    0
[4,]    0    0    0    1    0    0    0    0
[5,]    0    0    0    0    1    0    0    0
[6,]    0    0    0    0    0    1    0    0
[7,]    0    0    0    0    0    0    1    0
[8,]    0    0    0    0    0    0    0    1


3. Now load the code written, create a newH8 matric object from h8, using makeCacheMatrix

> source("cachematrix.R")
> newH8 <- makeCacheMatrix(h8)

4. Get the inverse of newH8 into newInv8 using the cacheSolve function

> newInv8 <- cacheSolve(newH8)

5. Visual inspection of newInv8 shows it's the same as inv8; subtracting newInv8 from inv8 gives a zero matrix, as expected.
> newInv8
        [,1]      [,2]       [,3]       [,4]        [,5]        [,6]        [,7]       [,8]
[1,]      64     -2016      20160     -92400      221760     -288288      192192     -51480
[2,]   -2016     84672    -952560    4656960   -11642400    15567552   -10594584    2882880
[3,]   20160   -952560   11430720  -58212000   149688000  -204324119   141261119  -38918880
[4,]  -92400   4656960  -58212000  304919999  -800414996  1109908794  -776936155  216215998
[5,]  221760 -11642400  149688000 -800414996  2134439987 -2996753738  2118916783 -594593995
[6,] -288288  15567552 -204324119 1109908793 -2996753738  4249941661 -3030050996  856215352
[7,]  192192 -10594584  141261119 -776936154  2118916782 -3030050996  2175421226 -618377753
[8,]  -51480   2882880  -38918880  216215998  -594593995   856215351  -618377753  176679358


> inv8 - newInv8
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    0    0    0    0    0    0    0    0
[2,]    0    0    0    0    0    0    0    0
[3,]    0    0    0    0    0    0    0    0
[4,]    0    0    0    0    0    0    0    0
[5,]    0    0    0    0    0    0    0    0
[6,]    0    0    0    0    0    0    0    0
[7,]    0    0    0    0    0    0    0    0
[8,]    0    0    0    0    0    0    0    0


6. Multiplying newInv8 by h8 gives the diagonal matrix, showing cacheSolve behaves as a inverse function
> round(newInv8 %*% h8, 3)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    0    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0    0
[3,]    0    0    1    0    0    0    0    0
[4,]    0    0    0    1    0    0    0    0
[5,]    0    0    0    0    1    0    0    0
[6,]    0    0    0    0    0    1    0    0
[7,]    0    0    0    0    0    0    1    0
[8,]    0    0    0    0    0    0    0    1

7. Invoking cacheSolve again gives the message about getting the cached value; the new newInv8 also behaves the same, as expected.

> newInv8 <- cacheSolve(newH8)
Getting the cached inverse value

> newInv8
        [,1]      [,2]       [,3]       [,4]        [,5]        [,6]        [,7]       [,8]
[1,]      64     -2016      20160     -92400      221760     -288288      192192     -51480
[2,]   -2016     84672    -952560    4656960   -11642400    15567552   -10594584    2882880
[3,]   20160   -952560   11430720  -58212000   149688000  -204324119   141261119  -38918880
[4,]  -92400   4656960  -58212000  304919999  -800414996  1109908794  -776936155  216215998
[5,]  221760 -11642400  149688000 -800414996  2134439987 -2996753738  2118916783 -594593995
[6,] -288288  15567552 -204324119 1109908793 -2996753738  4249941661 -3030050996  856215352
[7,]  192192 -10594584  141261119 -776936154  2118916782 -3030050996  2175421226 -618377753
[8,]  -51480   2882880  -38918880  216215998  -594593995   856215351  -618377753  176679358

> round(newInv8 %*% h8, 3)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]
[1,]    1    0    0    0    0    0    0    0
[2,]    0    1    0    0    0    0    0    0
[3,]    0    0    1    0    0    0    0    0
[4,]    0    0    0    1    0    0    0    0
[5,]    0    0    0    0    1    0    0    0
[6,]    0    0    0    0    0    1    0    0
[7,]    0    0    0    0    0    0    1    0
[8,]    0    0    0    0    0    0    0    1
